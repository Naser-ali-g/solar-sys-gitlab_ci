workflow:
    name: NodeJS Solar System Application Pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main'
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == 'merge_request_event' 
          when: always
        - when: never

stages:
  - testing
  - docker

variables:
   MONGO_INITDB_ROOT_USERNAME: "root-user-1234"
   NODE_ENV_TESTING : "test"
   NODE_ENV_DEPLOY : "deploy"
   CONTAINER_REGISTRY: "docker.io/$DOCKER_USERNAME"
   IMAGE_VERSION: $CI_PIPELINE_ID

unit_testing:
  stage: testing
  services:
    - name: siddharth67/mongo-db:non-prod
      alias: mongo
      variables:
         MONGO_INITDB_ROOT_PASSWORD: "root-password-1234"  
  image: node:18-alpine3.17
  cache:
    policy: pull-push
    key: testing
    paths:
      - node_modules
  before_script:
    - npm install
  script:
    - NODE_ENV=$NODE_ENV_TESTING npm test
  artifacts:
    name: Mocha Unit Testing
    expire_in: 3 weeks and 2 days
    when: always
    paths:
      - test-results.xml
    reports:
      junit: test-results.xml

code_coverage:
  stage: testing
  services:
    - name: siddharth67/mongo-db:non-prod
      alias: mongo
      variables:
         MONGO_INITDB_ROOT_PASSWORD: "root-password-1234"
  image: node:18-alpine3.17
  cache:
    policy: pull
    key: testing
    paths:
      - node_modules
  needs:
    - unit_testing
  before_script:
    - npm install
  script:
   - NODE_ENV=$NODE_ENV_TESTING npm run coverage
  artifacts:
    name: LCOV and Cobertura Coverage
    expire_in: 3 weeks and 2 days
    when: always
    paths:
    - coverage/
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  allow_failure: true

docker_build:
  stage: docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script: 
    - docker build -t $CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION .
    - docker images $CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION
    - mkdir image
    - docker save $CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION > image/$CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION.tar
  artifacts:
    paths:
      - image

docker_test:
  stage: docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - docker load -i image/$CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION.tar
    - docker run -d -p 3000:3000 $CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION
    - curl localhost:3000/live

docker_push:  
  stage: docker
  needs:
   - docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script: 
    -  docker load -i image/$CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION.tar
    -  docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
    -  docker push $CONTAINER_REGISTRY/node-solar-system:$IMAGE_VERSION
