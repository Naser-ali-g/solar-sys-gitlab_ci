workflow:
    name: NodeJS Solar System Application Pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main'
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == 'merge_request_event' 
          when: always
        - when: never

stages:
  - testing
  - docker

variables:
   MONGO_INITDB_ROOT_USERNAME: "root-user-1234"
   NODE_ENV_TESTING : "test"
   NODE_ENV_DEPLOY : "deploy"
   IMAGE_VERSION: $CI_PIPELINE_ID

# unit_testing:
#   stage: testing
#   services:
#     - name: siddharth67/mongo-db:non-prod
#       alias: mongo
#       variables:
#          MONGO_INITDB_ROOT_PASSWORD: "root-password-1234"  
#   image: node:18-alpine3.17
#   cache:
#     policy: pull-push
#     key: testing
#     paths:
#       - node_modules
#   before_script:
#     - npm install
#   script:
#     - NODE_ENV=$NODE_ENV_TESTING npm test
#   artifacts:
#     name: Mocha Unit Testing
#     expire_in: 3 weeks and 2 days
#     when: always
#     paths:
#       - test-results.xml
#     reports:
#       junit: test-results.xml

# code_coverage:
#   stage: testing
#   services:
#     - name: siddharth67/mongo-db:non-prod
#       alias: mongo
#       variables:
#          MONGO_INITDB_ROOT_PASSWORD: "root-password-1234"
#   image: node:18-alpine3.17
#   cache:
#     policy: pull
#     key: testing
#     paths:
#       - node_modules
#   needs:
#     - unit_testing
#   before_script:
#     - npm install
#   script:
#    - NODE_ENV=$NODE_ENV_TESTING npm run coverage
#   artifacts:
#     name: LCOV and Cobertura Coverage
#     expire_in: 3 weeks and 2 days
#     when: always
#     paths:
#     - coverage/
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   allow_failure: true

# docker_build:
#   stage: docker
#   image: docker:24.0.5
#   dependencies: []
#   services:
#     - docker:24.0.5-dind
#   script: 
#     - docker run --name nginx -p 80:80 -d nginx
#     - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' nginx)
#     - echo $IP
#     - docker run  alpine wget -O - $IP:80 | grep body

docker_build:
  stage: docker
  image: docker:24.0.5
  dependencies: []
  services:
    - docker:24.0.5-dind
  script: 
    - docker build -t $DOCKER_USERNAME/solar-system:$IMAGE_VERSION .
    - docker images $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    - mkdir image
    - docker save $DOCKER_USERNAME/solar-system:$IMAGE_VERSION > image/solar-system-image.tar
  artifacts:
    paths:
      - image

docker_test:
  stage: docker
  image: docker:24.0.5
  needs:
    - docker_build
  services:
    - docker:24.0.5-dind
  script:
    - docker load -i image/solar-system-image.tar
    - docker run --name solar-system-app -d -p 3000:3000 $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
    - echo $IP
    - docker run  alpine wget -O - $IP:3000 | grep live

docker_push:  
  stage: docker
  needs:
   - docker_test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script: 
    -  docker load -i image/solar-system-image.tar
    -  docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
    -  docker push $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
