workflow:
    name: NodeJS Solar System Application Pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main'
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == 'merge_request_event' 
          when: always
        - when: never

.prepare_nodejs_environment:  #we use extends to reuse the configration to make it easy to write and modify the code , we put the common config in a hidden job and call it when we need it
  services:
    - name: siddharth67/mongo-db:non-prod
      alias: mongo
      variables:
         MONGO_INITDB_ROOT_PASSWORD: "root-password-1234"  
  image: node:18-alpine3.17
  before_script:
    - npm install

.prepare_docker_environment:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind  

.prepare_integration_testing:
  image: alpine:3.7
  before_script:
  - apk --no-cache add curl   #we need here to inistall curl and jq to use it in testing the integration
  - apk --no-cache add jq
  - URL=`cat app_ingress_url.txt`  #to get the url of ingress 
  script:
  - echo $URL
  - curl -s -k https://$URL/live | jq -r .status | grep -i live  # it opens the url and check if the word live and ready exist so the test is success and u can move to next stage
  - curl -s -k https://$URL/ready | jq -r .status | grep -i ready

.prepare_deployment_environment:
  image:
    name: alpine:3.7
  before_script:
    - wget https://storage.googleapis.com/kubernetes-release/release/$(wget -q -O - https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl 
    - chmod +x ./kubectl
    - mv ./kubectl /usr/bin/kubectl
    - apk add --no-cache gettext #install gettext to use envsubst tool 
    - envsubst -V #check if it installed 

stages:
  - testing
  - docker
  - dev-deploy
  - stage-deploy

variables:
   MONGO_INITDB_ROOT_USERNAME: "root-user-1234"
   NODE_ENV_TESTING : "test"
   NODE_ENV_DEPLOY : "deploy"
   IMAGE_VERSION: $CI_PIPELINE_ID
   IMAGE: $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
   INGRESS_IP: "45.79.61.202"

# unit_testing:
#   extends: .prepare_nodejs_environment
#   stage: testing
#   cache:
#     policy: pull-push
#     key: testing
#     paths:
#       - node_modules
#   script:
#     - NODE_ENV=$NODE_ENV_TESTING npm test
#   artifacts:
#     name: Mocha Unit Testing
#     expire_in: 3 weeks and 2 days
#     when: always
#     paths:
#       - test-results.xml
#     reports:
#       junit: test-results.xml

# code_coverage:
#   stage: testing
#   extends: .prepare_nodejs_environment
#   cache:
#     policy: pull
#     key: testing
#     paths:
#       - node_modules
#   needs:
#     - unit_testing
#   script:
#    - NODE_ENV=$NODE_ENV_TESTING npm run coverage
#   artifacts:
#     name: LCOV and Cobertura Coverage
#     expire_in: 3 weeks and 2 days
#     when: always
#     paths:
#     - coverage/
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   allow_failure: true

docker_build:
  stage: docker
  extends: .prepare_docker_environment
  dependencies: []
  script: 
    - docker build -t $DOCKER_USERNAME/solar-system:$IMAGE_VERSION .
    - docker images $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
    - mkdir image
    - docker save $DOCKER_USERNAME/solar-system:$IMAGE_VERSION > image/solar-system-image.tar
  artifacts:
    paths:
      - image

# docker_test:
#   stage: docker
#   extends: .prepare_docker_environment
#   needs:
#     - docker_build
#   script:
#     - docker load -i image/solar-system-image.tar
#     - docker run --name solar-system-app -d -p 3000:3000 $DOCKER_USERNAME/solar-system:$IMAGE_VERSION
#     - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
#     - echo $IP
#     - docker run  alpine wget -q -O - http://$IP:3000/live | grep live

docker_push:  
  stage: docker
  extends: .prepare_docker_environment
  needs:
    - docker_build
#    - docker_test
  script: 
    -  docker load -i image/solar-system-image.tar
    -  docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
    -  docker push $DOCKER_USERNAME/solar-system:$IMAGE_VERSION

development_deploy:
  stage: dev-deploy
  extends: .prepare_deployment_environment
  dependencies: []
  script:
  - echo $KUBE_CONFIG # first show only this echo and then show/run below commands
  - export KUBECONFIG=$KUBE_CONFIG
  - kubectl config get-contexts   #Initialized empty Git repository in /builds/sidd-harth/staging-1/.git/
  - kubectl config view
  - for i in kubernetes/development/*.yaml; do envsubst < $i | kubectl apply -f -; done # Directory where yamls are placed in repo
  - kubectl -n $NAMESPACE get all,ing
  - kubectl -n $NAMESPACE get ing -o jsonpath="{.items[0].spec.tls[0].hosts[0]}" > app_ingress_url.txt
  environment: 
    name: development
  artifacts:
    paths: 
    - app_ingress_url.txt

dev_integration_testing:
  stage: dev-deploy
  needs:
    - development_deploy
  extends: .prepare_integration_testing

staging_deploy:
  stage: stage-deploy
  extends: .prepare_deployment_environment
  script:
  - kubectl config get-contexts # here we replace connect to cluster with put the kube config in a file var to avoid the security concerns and replaced it by connecting to cluster by adding agent 
  - kubectl config use-context sidd-harth/staging-1:kk-agent #here we use the contest from the agent we added 
  - kubectl config view
  - for i in kubernetes/development/*.yaml; do envsubst < $i | kubectl apply -f -; done # Directory where yamls are placed in repo
  - kubectl -n $NAMESPACE get all,ing
  - kubectl -n $NAMESPACE get ing -o jsonpath="{.items[0].spec.tls[0].hosts[0]}" > app_ingress_url.txt # to get the ingress url and redirect it to file to upload it after that as artifact 
  environment: 
    name: staging # we put this job on the env which we created in operate-env to seperate the env from each other and use seperatly values for the variables for each environment 
  artifacts:
    paths: 
    - app_ingress_url.txt  #upload that as artifact to use it in next jobs
  when: manual #we do it manual to wait for the admin approve to staging the changes in prod env

staging_integration_testing:
  tags:
    - linux
    - killercoda
  stage: stage-deploy
  needs:
  - staging_deploy
  extends: .prepare_integration_testing
